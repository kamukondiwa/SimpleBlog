// -------------------------------------------------------------------------------------------------
// <auto-generated>    
//  Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
// -------------------------------------------------------------------------------------------------
namespace Leatn.Web.Controllers.Post.Mappers
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;

    using Comments.Mappers.Contracts;

    using Contracts;

    using Domain.Blog;
    using Domain.Blog.BlogPost;
    using Domain.Blog.BlogPostComment;
    using Domain.Contracts.Services;
    using Domain.Tags;
    using Domain.User;

    using Framework.Extensions;
    using Framework.Traversal;

    using Machine.Specifications;
    using Machine.Specifications.AutoMocking.Rhino;
    using Machine.Specifications.Utility;

    using Rhino.Mocks;

    using ViewModels;

    public abstract class context_for_blog_post_page_view_model_mapper : Specification<BlogPostPageViewModelMapper>
    {
        protected static IIdentityService identity_service;

        protected static IBlogPostFormViewModelMapper blog_post_form_view_model_mapper;

        protected static IBlogPostCommentPageViewModelMapper blog_post_comment_page_view_model_mapper;

        Establish context = () =>
            {
                identity_service = DependencyOf<IIdentityService>();
                blog_post_form_view_model_mapper = DependencyOf<IBlogPostFormViewModelMapper>();
                blog_post_comment_page_view_model_mapper = DependencyOf<IBlogPostCommentPageViewModelMapper>();
            };
    }

    public class when_the_mapper_is_asked_to_map_from_a_blog : context_for_blog_post_page_view_model_mapper
    {
        static Blog the_blog;

        static BlogPost the_blog_post;

        static BlogPostPageViewModel result;

        static User the_author;

        static IList<BlogPostComment> the_comments;

        static Tag tagsRoot;

        Establish context = () =>
            {
                the_comments = new Collection<BlogPostComment>();

                var tag1 = new Tag{Name = "Video Tutorial"};
                tag1.SetNonPublicProperty(x => x.Id, 1);
                var tag2 = new Tag { Name = "ASP.NET" };
                tag2.SetNonPublicProperty(x => x.Id, 2);
                the_blog_post = new BlogPost { PostDate = DateTime.Now, Comments = the_comments, Tags = new List<Tag>{tag1, tag2}};

                tagsRoot = new Tag();

                the_author = new User { Username = "user1" };

                the_blog = new Blog { Author = the_author, Url = "new-blog" };

                identity_service.Stub(x => x.GetCurrentUser()).Return(the_author);
            };

        Because of = () =>
            {
                result = subject.MapFrom(the_blog, the_blog_post, tagsRoot);
            };

        It should_the_set_show_edit_link_property_if_the_current_user_is_the_author_of_the_blog = () => result.ShowEditLink.ShouldBeTrue();
        It should_map_the_blog_url_correct = () => result.BlogUrl.ShouldBeTheSameAs(the_blog.Url);
        It should_map_the_author_correctly = () => result.Author.ShouldBeTheSameAs(the_blog.Author.Username);
        It should_map_the_post_date_correctly = () => result.PostDate.ShouldEqual(the_blog_post.PostDate.ToString("dd MMMM yyyy"));
        It should_ask_the_blog_post_form_view_model_mapper_to_map_the_form = () => blog_post_form_view_model_mapper.AssertWasCalled(x => x.MapFrom(the_blog_post));
        It should_ask_the_blog_post_comment_page_view_model_mapper_to_map_from_the_comments = () => the_comments.Each(c => blog_post_comment_page_view_model_mapper.AssertWasCalled(x => x.MapFrom(c)));
        It should_map_the_assigned_tags_correctly = () => the_blog_post.Tags.ForEach(x => result.AssignedTags.ShouldContain("{0}-{1}".FormatWith(x.Name, x.Id)));
    }
}