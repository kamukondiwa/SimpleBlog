// -------------------------------------------------------------------------------------------------
// <auto-generated>    
//  Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
// -------------------------------------------------------------------------------------------------
namespace Leatn.Web.Controllers.Search.Mappers
{
    using System;
    using System.Collections.Generic;
    using System.Web.Mvc;

    using Contracts;

    using Domain.Shared;

    using Machine.Specifications;
    using Machine.Specifications.AutoMocking.Rhino;
    using Machine.Specifications.Utility;

    using Rhino.Mocks;

    using ViewModels;


    internal class TestAddressableContent : AddressableContentBase
    {
    }

    public abstract class context_for_search_page_view_model_mapper : Specification<ISearchPageViewModelMapper, SearchPageViewModelMapper>
    {
        protected static ISearchResultViewModelMapper search_result_view_model_mapper;

        protected static ISearchContentTypeSelectListMapper search_content_type_select_list_mapper;

        Establish context = () =>
            {
                search_result_view_model_mapper = DependencyOf<ISearchResultViewModelMapper>();
                search_content_type_select_list_mapper = DependencyOf<ISearchContentTypeSelectListMapper>();
            };
    }

    public class when_the_search_page_view_model_mapper_is_asked_to_map_from_some_search_result : context_for_search_page_view_model_mapper
    {
        static IEnumerable<AddressableContentBase> the_search_results;

        static SearchPageViewModel the_search_page_view_model;

        static SearchContentType the_search_content_type;

        static SelectList the_search_content_type_select_list;

        static SearchFormViewModel the_search_form;

        static DateTime the_date_to;

        static DateTime the_date_from;

        Establish context = () =>
            {
                the_search_results = new List<AddressableContentBase> { new TestAddressableContent() };

                the_search_content_type = SearchContentType.Post;

                the_search_content_type_select_list = new SelectList(the_search_content_type.ToList());

                search_content_type_select_list_mapper.Stub(x => x.MapFrom(the_search_content_type)).Return(
                    the_search_content_type_select_list);

                the_date_from = DateTime.Now;
                the_date_to = DateTime.Now;

                the_search_form = new SearchFormViewModel
                    {
                        DateFrom = the_date_from,
                        DateTo = the_date_to
                    };
            };

        Because of = () =>
            {
                the_search_page_view_model = subject.MapFrom(the_search_results, the_search_content_type, the_search_form);
            };

        It should_ask_the_search_result_view_model_mapper_to_map_all_of_the_search_results = () => the_search_results.Each(x => search_result_view_model_mapper.AssertWasCalled(m => m.MapFrom(x)));

        It should_ask_the_search_content_type_select_list_mapper_to_map_from_the_search_content_type = () => search_content_type_select_list_mapper.AssertWasCalled(x => x.MapFrom(the_search_content_type));

        It should_assign_the_mapped_search_content_type_select_list_to_the_search_page_view_model = () => the_search_page_view_model.ContentTypes.ShouldBeTheSameAs(the_search_content_type_select_list);

        It should_assign_the_search_form_to_the_page_view_model = () => the_search_page_view_model.Form.ShouldBeTheSameAs(the_search_form);

        It should_map_the_date_from_correctl = () => the_search_page_view_model.DateFrom.ShouldEqual(the_date_from.ToString("dd MMMM yyyy"));

        It should_map_the_date_to_correctly = () => the_search_page_view_model.DateFrom.ShouldEqual(the_date_to.ToString("dd MMMM yyyy"));
    }

}