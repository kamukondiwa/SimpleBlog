// -------------------------------------------------------------------------------------------------
// <auto-generated>    
//  Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
// -------------------------------------------------------------------------------------------------
namespace Leatn.Web.Controllers.Blog
{
    #region Using Directives

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Web.Mvc;

    using Domain.Contracts.Services;
    using Domain.User;

    using Mvc.Caching.Contracts;

    using Post.Mappers.Contracts;

    using Domain.Blog;
    using Domain.Blog.BlogPost;
    using Domain.Contracts.Tasks;

    using Machine.Specifications;
    using Machine.Specifications.AutoMocking.Rhino;
    using Machine.Specifications.Mvc;

    using Mappers.Contracts;

    using Rhino.Mocks;

    using ViewModels;

    #endregion

    public abstract class context_for_blog_controller : Specification<BlogController>
    {
        protected static IBlogTasks blog_tasks;

        protected static IBlogPostListPageViewModelMapper the_blog_post_list_page_view_model_mapper;

        protected static IBlogSaveDetailsMappper blog_Save_Details_Mappper;

        protected static IBlogPageViewModelMapper blog_page_view_model_mapper;

        protected static IBlogPostSaveDetailsMapper blog_post_save_details_mapper;

        protected static IBlogPostPageViewModelMapper blogPostPageViewModelMapper;

        protected static IBlogPostTasks blog_post_tasks;

        protected static IIdentityService identity_service;

        protected static IBlogPostArchivePageViewModelMapper blog_post_archive_view_model_mapper;

        protected static IBlogUserPageViewModelMapper blog_user_page_view_model_mapper;

        protected static ICachingProvider caching_provider;

        private Establish context = () =>
            {
                blog_tasks = DependencyOf<IBlogTasks>();
                the_blog_post_list_page_view_model_mapper = DependencyOf<IBlogPostListPageViewModelMapper>();
                blog_Save_Details_Mappper = DependencyOf<IBlogSaveDetailsMappper>();
                blog_page_view_model_mapper = DependencyOf<IBlogPageViewModelMapper>();
                blog_post_save_details_mapper = DependencyOf<IBlogPostSaveDetailsMapper>();
                blogPostPageViewModelMapper = DependencyOf<IBlogPostPageViewModelMapper>();
                blog_post_tasks = DependencyOf<IBlogPostTasks>();
                identity_service = DependencyOf<IIdentityService>();
                blog_post_archive_view_model_mapper = DependencyOf<IBlogPostArchivePageViewModelMapper>();
                blog_user_page_view_model_mapper = DependencyOf<IBlogUserPageViewModelMapper>();
                caching_provider = DependencyOf<ICachingProvider>();
            };
    }

    public class when_the_index_action_is_called : context_for_blog_controller
    {
        static IQueryable<BlogPost> the_latest_blog_posts;

        static BlogPostListPageViewModel the_model;

        static ActionResult result;

        private Establish context = () =>
            {
                the_latest_blog_posts = new List<BlogPost>().AsQueryable();

                blog_post_tasks.Stub(x => x.GetLatestBlogPosts()).Return(the_latest_blog_posts);

                the_model = new BlogPostListPageViewModel();

                the_blog_post_list_page_view_model_mapper.Stub(x => x.MapFrom(the_latest_blog_posts)).Return(the_model);
            };

        Because of = () => result = subject.Index();

        It should_ask_the_blog_post_tasks_for_the_latest_blog_posts = () => blog_post_tasks.AssertWasCalled(x => x.GetLatestBlogPosts());

        It should_ask_the_blog_list_page_view_model_mapper_to_map_the_model_from_the_latest_blogs = () => the_blog_post_list_page_view_model_mapper.AssertWasCalled(x => x.MapFrom(the_latest_blog_posts));

        It should_return_the_model_to_the_view = () => result.ShouldBeAView().And().Model<BlogPostListPageViewModel>().ShouldBeTheSameAs(the_model);
    }

    public class when_the_create_action_is_called : context_for_blog_controller
    {
        static ActionResult result;

        static BlogFormViewModel the_blog_form_view_model;

        static BlogSaveDetails the_blog_save_details;

        Establish context = () =>
            {
                the_blog_form_view_model = new BlogFormViewModel();
                the_blog_save_details = new BlogSaveDetails { Url = "new_blog" };
                blog_Save_Details_Mappper.Stub(x => x.MapFrom(the_blog_form_view_model)).Return(the_blog_save_details);
            };

        Because of = () =>
            {
                result = subject.Create(the_blog_form_view_model);
            };

        It should_ask_the_blog_mapper_to_map_the_save_request_from_the_form_view_model = () => blog_Save_Details_Mappper.AssertWasCalled(x => x.MapFrom(the_blog_form_view_model));

        It should_ask_the_blog_tasks_to_save_the_blog_save_details = () => blog_tasks.AssertWasCalled(x => x.Save(the_blog_save_details));

        It should_redirect_to_the_read_page = () => result.ShouldRedirectToAction<BlogController>(x => x.Read(the_blog_save_details.Url));
    }

    public class when_the_read_action_is_called_with_a_url_parameter : context_for_blog_controller
    {
        static string the_url;

        static ActionResult result;

        static Blog the_new_blog;

        static BlogPageViewModel the_page_view_model;

        Establish context = () =>
            {
                the_url = "new-blog";
                the_new_blog = new Blog { Url = the_url };
                blog_tasks.Stub(x => x.GetBlog(the_url)).Return(the_new_blog);
                the_page_view_model = new BlogPageViewModel();
                blog_page_view_model_mapper.Stub(x => x.MapFrom(the_new_blog)).Return(the_page_view_model);
            };

        Because of = () =>
            {
                result = subject.Read(the_url);
            };

        It should_ask_the_blog_task_to_get_the_blog = () => blog_tasks.AssertWasCalled(x => x.GetBlog(the_url));

        It should_the_page_view_model_from_the_blog = () => blog_page_view_model_mapper.AssertWasCalled(x => x.MapFrom(the_new_blog));

        It should_return_the_page_view_model_to_the_view = () => result.ShouldBeAView().And().Model<BlogPageViewModel>().ShouldBeTheSameAs(the_page_view_model);
    }

    public class when_the_blog_controller_is_asked_for_a_blog_archive_by_year : context_for_blog_controller
    {
        static string the_blog_url;

        static ActionResult result;

        static int the_archive_year;

        static IEnumerable<BlogPost> the_blog_posts;

        static BlogPostArchivePageViewModel the_page_view_model;

        Establish context = () =>
            {
                the_blog_posts = new List<BlogPost>();

                the_blog_url = "new blog";

                the_archive_year = 1;

                blog_tasks.Stub(x => x.GetArchivedBlogPosts(the_blog_url, the_archive_year)).Return(the_blog_posts);

                the_page_view_model = new BlogPostArchivePageViewModel();

                blog_post_archive_view_model_mapper.Stub(x => x.MapFrom(the_blog_posts)).Return(the_page_view_model);
            };

        Because of = () =>
            {
                result = subject.ArchiveByYear(the_blog_url, the_archive_year);
            };

        It should_ask_the_blog_tasks_for_blog_posts_by_blog_url_and_archive_year = () => blog_tasks.AssertWasCalled(x => x.GetArchivedBlogPosts(the_blog_url, the_archive_year));

        It should_ask_the_blog_post_archive_page_view_model_mapper_to_map_from_the_blog_posts = () => blog_post_archive_view_model_mapper.AssertWasCalled(x => x.MapFrom(the_blog_posts));

        It should_return_the_blog_post_archive_page_view_model_to_the_view = () => result.ShouldBeAView().And().Model<BlogPostArchivePageViewModel>().ShouldBeTheSameAs(the_page_view_model);

    }

    public class when_the_blog_controller_is_asked_for_a_blog_archive_by_month : context_for_blog_controller
    {
        static string the_blog_url;

        static ActionResult result;

        static int the_archive_year;

        static string the_archive_month;

        static IEnumerable<BlogPost> the_blog_posts;

        static BlogPostArchivePageViewModel the_page_view_model;

        Establish context = () =>
        {
            the_blog_posts = new List<BlogPost>();

            the_blog_url = "new blog";

            the_archive_year = 1;

            the_archive_month = "January";

            blog_tasks.Stub(x => x.GetArchivedBlogPosts(the_blog_url, the_archive_year, the_archive_month)).Return(the_blog_posts);

            the_page_view_model = new BlogPostArchivePageViewModel();

            blog_post_archive_view_model_mapper.Stub(x => x.MapFrom(the_blog_posts)).Return(the_page_view_model);
        };

        Because of = () =>
        {
            result = subject.ArchiveByMonth(the_blog_url, the_archive_year, the_archive_month);
        };

        It should_ask_the_blog_tasks_for_blog_posts_by_blog_url_and_archive_year = () => blog_tasks.AssertWasCalled(x => x.GetArchivedBlogPosts(the_blog_url, the_archive_year, the_archive_month));

        It should_ask_the_blog_post_archive_page_view_model_mapper_to_map_from_the_blog_posts = () => blog_post_archive_view_model_mapper.AssertWasCalled(x => x.MapFrom(the_blog_posts));

        It should_return_the_blog_post_archive_page_view_model_to_the_view = () => result.ShouldBeAView().And().Model<BlogPostArchivePageViewModel>().ShouldBeTheSameAs(the_page_view_model);

    }

    public class when_the_blog_controller_is_asked_for_a_users_blogs : context_for_blog_controller
    {
        static string the_username;

        static ActionResult result;

        static BlogUserPageViewModel the_page_view_model;

        static User the_user;

        static IList<Blog> the_blogs;

        Establish context = () =>
            {
                the_username = "uber user";

                the_blogs = new List<Blog>();

                the_user = new User { Blogs = the_blogs };

                caching_provider.Stub(x => x.TryGet(the_username, ()=>new User())).IgnoreArguments().Return(the_user);

                the_page_view_model = new BlogUserPageViewModel();

                blog_user_page_view_model_mapper.Stub(x => x.MapFrom(the_blogs)).Return(the_page_view_model);
            
            };

        Because of = () =>
            {
                result = subject.ReadUserBlogs(the_username);
            };

        It should_ask_the_identity_service_for_the_user_by_name = () => identity_service.GetUser(the_username);

        It should_map_the_page_view_model_from_the_users_blogs = () => blog_user_page_view_model_mapper.AssertWasCalled(x => x.MapFrom(the_user.Blogs));

        It should_return_the_page_view_model_to_the_view = () => result.ShouldBeAView().And().Model<BlogUserPageViewModel>().ShouldBeTheSameAs(the_page_view_model);

    }
}
